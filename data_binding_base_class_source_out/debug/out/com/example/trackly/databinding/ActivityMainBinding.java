// Generated by view binder compiler. Do not edit!
package com.example.trackly.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.trackly.R;
import com.github.mikephil.charting.charts.PieChart;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.google.android.material.tabs.TabLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final BottomNavigationView bottomNavigation;

  @NonNull
  public final FloatingActionButton btnAddTransaction;

  @NonNull
  public final ImageButton btnNextMonth;

  @NonNull
  public final ImageButton btnPreviousMonth;

  @NonNull
  public final MaterialCardView cardBudget;

  @NonNull
  public final MaterialCardView cardChart;

  @NonNull
  public final LinearLayout layoutMonthSelector;

  @NonNull
  public final PieChart pieChart;

  @NonNull
  public final LinearProgressIndicator progressBudget;

  @NonNull
  public final RecyclerView recyclerRecentTransactions;

  @NonNull
  public final TabLayout tabLayout;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final TextView tvAppName;

  @NonNull
  public final TextView tvBalanceAmount;

  @NonNull
  public final TextView tvBalanceLabel;

  @NonNull
  public final TextView tvBudgetStatus;

  @NonNull
  public final TextView tvCategoryTitle;

  @NonNull
  public final TextView tvCurrentMonth;

  @NonNull
  public final TextView tvExpenseAmount;

  @NonNull
  public final TextView tvIncomeAmount;

  @NonNull
  public final TextView tvRecentTransactions;

  @NonNull
  public final TextView tvViewAllTransactions;

  private ActivityMainBinding(@NonNull CoordinatorLayout rootView,
      @NonNull AppBarLayout appBarLayout, @NonNull BottomNavigationView bottomNavigation,
      @NonNull FloatingActionButton btnAddTransaction, @NonNull ImageButton btnNextMonth,
      @NonNull ImageButton btnPreviousMonth, @NonNull MaterialCardView cardBudget,
      @NonNull MaterialCardView cardChart, @NonNull LinearLayout layoutMonthSelector,
      @NonNull PieChart pieChart, @NonNull LinearProgressIndicator progressBudget,
      @NonNull RecyclerView recyclerRecentTransactions, @NonNull TabLayout tabLayout,
      @NonNull Toolbar toolbar, @NonNull TextView tvAppName, @NonNull TextView tvBalanceAmount,
      @NonNull TextView tvBalanceLabel, @NonNull TextView tvBudgetStatus,
      @NonNull TextView tvCategoryTitle, @NonNull TextView tvCurrentMonth,
      @NonNull TextView tvExpenseAmount, @NonNull TextView tvIncomeAmount,
      @NonNull TextView tvRecentTransactions, @NonNull TextView tvViewAllTransactions) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.bottomNavigation = bottomNavigation;
    this.btnAddTransaction = btnAddTransaction;
    this.btnNextMonth = btnNextMonth;
    this.btnPreviousMonth = btnPreviousMonth;
    this.cardBudget = cardBudget;
    this.cardChart = cardChart;
    this.layoutMonthSelector = layoutMonthSelector;
    this.pieChart = pieChart;
    this.progressBudget = progressBudget;
    this.recyclerRecentTransactions = recyclerRecentTransactions;
    this.tabLayout = tabLayout;
    this.toolbar = toolbar;
    this.tvAppName = tvAppName;
    this.tvBalanceAmount = tvBalanceAmount;
    this.tvBalanceLabel = tvBalanceLabel;
    this.tvBudgetStatus = tvBudgetStatus;
    this.tvCategoryTitle = tvCategoryTitle;
    this.tvCurrentMonth = tvCurrentMonth;
    this.tvExpenseAmount = tvExpenseAmount;
    this.tvIncomeAmount = tvIncomeAmount;
    this.tvRecentTransactions = tvRecentTransactions;
    this.tvViewAllTransactions = tvViewAllTransactions;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.bottom_navigation;
      BottomNavigationView bottomNavigation = ViewBindings.findChildViewById(rootView, id);
      if (bottomNavigation == null) {
        break missingId;
      }

      id = R.id.btn_add_transaction;
      FloatingActionButton btnAddTransaction = ViewBindings.findChildViewById(rootView, id);
      if (btnAddTransaction == null) {
        break missingId;
      }

      id = R.id.btn_next_month;
      ImageButton btnNextMonth = ViewBindings.findChildViewById(rootView, id);
      if (btnNextMonth == null) {
        break missingId;
      }

      id = R.id.btn_previous_month;
      ImageButton btnPreviousMonth = ViewBindings.findChildViewById(rootView, id);
      if (btnPreviousMonth == null) {
        break missingId;
      }

      id = R.id.card_budget;
      MaterialCardView cardBudget = ViewBindings.findChildViewById(rootView, id);
      if (cardBudget == null) {
        break missingId;
      }

      id = R.id.card_chart;
      MaterialCardView cardChart = ViewBindings.findChildViewById(rootView, id);
      if (cardChart == null) {
        break missingId;
      }

      id = R.id.layout_month_selector;
      LinearLayout layoutMonthSelector = ViewBindings.findChildViewById(rootView, id);
      if (layoutMonthSelector == null) {
        break missingId;
      }

      id = R.id.pie_chart;
      PieChart pieChart = ViewBindings.findChildViewById(rootView, id);
      if (pieChart == null) {
        break missingId;
      }

      id = R.id.progress_budget;
      LinearProgressIndicator progressBudget = ViewBindings.findChildViewById(rootView, id);
      if (progressBudget == null) {
        break missingId;
      }

      id = R.id.recycler_recent_transactions;
      RecyclerView recyclerRecentTransactions = ViewBindings.findChildViewById(rootView, id);
      if (recyclerRecentTransactions == null) {
        break missingId;
      }

      id = R.id.tab_layout;
      TabLayout tabLayout = ViewBindings.findChildViewById(rootView, id);
      if (tabLayout == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tv_app_name;
      TextView tvAppName = ViewBindings.findChildViewById(rootView, id);
      if (tvAppName == null) {
        break missingId;
      }

      id = R.id.tv_balance_amount;
      TextView tvBalanceAmount = ViewBindings.findChildViewById(rootView, id);
      if (tvBalanceAmount == null) {
        break missingId;
      }

      id = R.id.tv_balance_label;
      TextView tvBalanceLabel = ViewBindings.findChildViewById(rootView, id);
      if (tvBalanceLabel == null) {
        break missingId;
      }

      id = R.id.tv_budget_status;
      TextView tvBudgetStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvBudgetStatus == null) {
        break missingId;
      }

      id = R.id.tv_category_title;
      TextView tvCategoryTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvCategoryTitle == null) {
        break missingId;
      }

      id = R.id.tv_current_month;
      TextView tvCurrentMonth = ViewBindings.findChildViewById(rootView, id);
      if (tvCurrentMonth == null) {
        break missingId;
      }

      id = R.id.tv_expense_amount;
      TextView tvExpenseAmount = ViewBindings.findChildViewById(rootView, id);
      if (tvExpenseAmount == null) {
        break missingId;
      }

      id = R.id.tv_income_amount;
      TextView tvIncomeAmount = ViewBindings.findChildViewById(rootView, id);
      if (tvIncomeAmount == null) {
        break missingId;
      }

      id = R.id.tv_recent_transactions;
      TextView tvRecentTransactions = ViewBindings.findChildViewById(rootView, id);
      if (tvRecentTransactions == null) {
        break missingId;
      }

      id = R.id.tv_view_all_transactions;
      TextView tvViewAllTransactions = ViewBindings.findChildViewById(rootView, id);
      if (tvViewAllTransactions == null) {
        break missingId;
      }

      return new ActivityMainBinding((CoordinatorLayout) rootView, appBarLayout, bottomNavigation,
          btnAddTransaction, btnNextMonth, btnPreviousMonth, cardBudget, cardChart,
          layoutMonthSelector, pieChart, progressBudget, recyclerRecentTransactions, tabLayout,
          toolbar, tvAppName, tvBalanceAmount, tvBalanceLabel, tvBudgetStatus, tvCategoryTitle,
          tvCurrentMonth, tvExpenseAmount, tvIncomeAmount, tvRecentTransactions,
          tvViewAllTransactions);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
